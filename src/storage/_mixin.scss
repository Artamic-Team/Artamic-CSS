@import "../storage/value";
@import './func';

// This mixin takes five parameters:
// $postfix: Used as part of the class name to indicate the color.
// $alpha-postfix: Used as part of the class name to indicate the transparency level.
// $color-code: The color code 
// $alpha: The transparency level 
// $type: Specifies the type of style to be applied (in this case, "color" for text color).


//Logic:
//If $type is "color", a CSS class for the text color is generated.
//Otherwise, a CSS class for the background color is generated.



// Mixin to define aspect color-generator classes with 'color-'  prefix
// This mixin generates classes with a prefix 'color' followed by the  name


@mixin color-generator($postfix, $alpha-postfix, $color-code, $alpha, $type) {

  @if $type=="color" {
    .color-#{$postfix}-#{$alpha-postfix} {

      color: rgba(red($color-code), green($color-code), blue($color-code), $alpha);
    }

  }


  // Mixin to define aspect color-generator classes with  'bg-' prefix
  // This mixin generates classes with a prefix 'bg' followed by the  name


  @else {

    .bg-#{$postfix}-#{$alpha-postfix} {
      background-color: rgba(red($color-code), green($color-code), blue($color-code), $alpha);
    }

  }
}




// $key: This string specifies the type of width value (e.g., "fit", "100px", "2em").
// $value: This holds the actual width value (e.g., "100px", "2em").
// $end : This argument for breckdown of lopp.
// $i : loop variable
// $property: This specifies the CSS property to apply the width to (usually "height").
// $postfix : This string is used as a prefix for the generated CSS classes.

@mixin set-height-value($key, $value, $end, $i, $property, $postfix: "height") {

  @if ($key=="fit" or $key=="max-content" or $key=="min-content" or $key=="auto") {

    $name: set-postfix-height($postfix);

    .#{$name}-#{$key} {
      #{$property}: $value;
    }

  }

  @else {

    $name: set-postfix-height($postfix);

    .#{$name}-#{$i}#{$key} {

      #{$property}: if($key =="p", percentage($i / 100), #{$i}#{$value});
    }
  }
}





// $key: This string specifies the type of width value (e.g., "fit", "100px", "2em").
// $value: This holds the actual width value (e.g., "100px", "2em").
// $end : This argument for breckdown of lopp.
// $i : loop variable
// $property: This specifies the CSS property to apply the width to (usually "width").
// $postfix : This string is used as a prefix for the generated CSS classes.

@mixin set-width-value($key, $value, $end, $i, $property, $postfix: "width") {

  @if ($key=="fit" or $key=="max-content" or $key=="min-content" or $key=="auto") {

    $name: set-postfix-width($postfix);

    .#{$name}-#{$key} {
      #{$property}: $value;
    }

  }

  @else {

    $name: set-postfix-width($postfix);

    .#{$name}-#{$i}#{$key} {

      #{$property}: if($key =="p", percentage($i / 100), #{$i}#{$value});
    }
  }
}





//set the margin property and value
//for horizontal and vertical
@mixin margin($property, $value) {
  @if $property =='x' {
    margin-left: $value;
    margin-right: $value;
  }

  @else if $property =='y' {
    margin-top: $value;
    margin-bottom: $value;
  }

  @else if $property =='top-right' {
    margin-top: $value;
    margin-right: $value;
  }

  @else if $property =='top-left' {
    margin-top: $value;
    margin-left: $value;
  }

  @else if $property =='bottom-right' {
    margin-bottom: $value;
    margin-right: $value;
  }

  @else if $property =='bottom-left' {
    margin-bottom: $value;
    margin-left: $value;
  }

  @else {
    margin: $value;
  }
}



//set the padding property and value
//for horizontal and vertical
@mixin padding($property, $value) {
  @if $property =='x' {
    padding-left: $value;
    padding-right: $value;
  }

  @else if $property =='y' {
    padding-top: $value;
    padding-bottom: $value;
  }

  @else if $property =='top-right' {
    padding-top: $value;
    padding-right: $value;
  }

  @else if $property =='top-left' {
    padding-top: $value;
    padding-left: $value;
  }

  @else if $property =='bottom-right' {
    padding-bottom: $value;
    padding-right: $value;
  }

  @else if $property =='bottom-left' {
    padding-bottom: $value;
    padding-left: $value;
  }

  @else {
    padding: $value;
  }
}





// Generates classes for numeric values: 
//For other units (like "x", "m") , 
//it uses a loop to generate multiple CSS classes.
// The loop iterates from 1 to a value obtained using
// the end-value function.
// Inside the loop, a CSS class is created with the $postfix,
// the loop counter ($i), and 
//the current unit ($key) appended.
// The $prop property of this class is set to the loop counter 
// value followed by the unit ($i#{$key}).
// position will be top,right,bottom,left

@mixin margin-padding-maker($postfix, $prop) {
  @each $key, $value in $units-postfix {
    $end: end-value($key); // set end value for loop

    @if ($key =='auto') {

      // class will be .m-auto or .p-auto
      // or .m-position-postix or .p-position-auto
      //$postfix: m or p and $prop css margin padding,propery
      .#{$postfix}-#{$key} {
        #{$prop}: #{$value};
      }
    }

    @else {
      @for $i from 1 through $end {

        // class will be .m-3x or .p-4px or
        // .m-position-postix or .p-position-postix
        //$postfix: m or p or m-position or p-position
        // and $prop css margin,padding property
        .#{$postfix}-#{$i}#{$key} {
          #{$prop}: #{$i}#{$value};
        }
      }

    }

  }
}

;


// base

// set $p: "%"

@mixin fancy-corner($pro, $x, $y) {
  $p: "%";

  @if($pro=="ss") {
    border-start-start-radius: #{$x}#{$p} #{$y}#{$p};
  }

  @else if($pro=="se") {
    border-start-end-radius: #{$x}#{$p} #{$y}#{$p};
  }

  @else if($pro=="es") {
    border-end-start-radius: #{$x}#{$p} #{$y}#{$p};
  }

  @else if($pro=="ee") {
    border-end-end-radius: #{$x}#{$p} #{$y}#{$p};
  }


}



/*----------Typography----------*/
/*----------Font----------*/
@mixin set-font-family($key, $value, $property) {
  .#{$property}-#{$key} {
      font-family: $value;
  }
}

@mixin set-font-size($key, $value, $property) {
  .#{$property}-#{$key} {
      font-size: $value;
  }
}

@mixin set-font-style($key, $value, $property) {
  .#{$property}-#{$key} {
      font-style: $value;
  }
}

@mixin set-font-weight($key, $value, $property) {
  .#{$property}-#{$key} {
      font-weight: $value;
  }
}

@mixin set-font-variant($key, $value, $property) {
  .#{$property}-#{$key} {
      font-variant: $value;
  }
}

@mixin set-font-stretch($key, $value, $property) {
  .#{$property}-#{$key} {
      font-stretch: $value;
  }
}

@mixin set-font-kerning($key, $value, $property) {
  .#{$property}-#{$key} {
      font-kerning: $value;
  }
}

@mixin set-font-synthesis($key, $value, $property) {
  .#{$property}-#{$key} {
    font-synthesis: $value;
  }
}

@mixin set-font-optical-sizing($key, $value, $property) {
  .#{$property}-#{$key} {
    font-optical-sizing: $value;
  }
}

/*----------Text----------*/

//position mixin

@mixin edge-set($pro, $value, $u: "") {


  @if($pro=="top") {
    top: #{$value}#{$u};
  }

  @else if($pro=="right") {
    right: #{$value}#{$u};
  }

  @else if($pro=="left") {
    left: #{$value}#{$u};
  }

  @else if($pro=="botttom") {
    bottom: #{$value}#{$u};
  }

  @else if($pro=="pos-x") {
    right: #{$value}#{$u};
    left: #{$value}#{$u};
  }

  @else if($pro=="pos-y") {
    top: #{$value}#{$u};
    bottom: #{$value}#{$u};
  }

  @else {
    inset:#{$value}#{$u};
  }


}

//postion-edge mixin

@mixin edge-class-maker($key, $end, $postfix, $u: "") {
  @if ($postfix=="auto") {
    .#{$key}\:auto {

      @include edge-set($key, "auto");

    }
  }

  @else {

    @for $i from 0 through $end {
      @if($i==0) {
        .#{$key}\:#{$i} {

          @include edge-set($key, $i);
        }
      }

      @else {
        .#{$key}\:#{$i}#{$postfix} {

          @include edge-set($key, $i, $u);
        }
      }
    }
  }
}